;;; Code Module

(define (code-dest dstr)
  (cond
   ((string-null? dstr) "000")
   ((string=? dstr "M") "001")
   ((string=? dstr "D") "010")
   ((string=? dstr "MD") "011")
   ((string=? dstr "A") "100")
   ((string=? dstr "AM") "101")
   ((string=? dstr "AD") "110")
   ((string=? dstr "ADM") "111")
   (else
    "")))

(define (code-comp cstr)
  (cond
   ((string=? cstr "0")   "0101010")
   ((string=? cstr "1")   "0111111")
   ((string=? cstr "-1")  "0111010")
   ((string=? cstr "D")   "0001100")
   ((string=? cstr "A")   "0110000")
   ((string=? cstr "!D")  "0001101")
   ((string=? cstr "!A")  "0110001")
   ((string=? cstr "-A")  "0110011")
   ((string=? cstr "D+1") "0011111")
   ((string=? cstr "A+1") "0110111")
   ((string=? cstr "D-1") "0001110")
   ((string=? cstr "A-1") "0110010")
   ((string=? cstr "D+A") "0000010")
   ((string=? cstr "D-A") "0010011")
   ((string=? cstr "A-D") "0000111")
   ((string=? cstr "D&A") "0000000")
   ((string=? cstr "D|A") "0010101")
   ((string=? cstr "M")   "1110000")
   ((string=? cstr "!M")  "1110001")
   ((string=? cstr "-M")  "110011")
   ((string=? cstr "M+1") "1110111")
   ((string=? cstr "M-1") "1110010")
   ((string=? cstr "D+M") "1000010")
   ((string=? cstr "D-M") "1010011")
   ((string=? cstr "M-D") "1000111")
   ((string=? cstr "D&M") "1000000")
   ((string=? cstr "D|M") "1010101")))
   
(define (code-jump jstr)
  (cond
   ((string-null? jstr) "000")
   ((string=? jstr "JGT") "001")
   ((string=? jstr "JEQ") "010")
   ((string=? jstr "JGE") "011")
   ((string=? jstr "JLT") "100")
   ((string=? jstr "JNE") "101")
   ((string=? jstr "JLE") "110")
   ((string=? jstr "JMP") "111")))
